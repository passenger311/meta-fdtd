#!/bin/bash

# ----------------------------------------------------------
#  program settings
# ----------------------------------------------------------

# ------- name of job
#$ -N max3d-mpi
# ------- parallel smp
#$ -pe mvapich 1 

PROGRAM="max3d"
FLAGS=""
MPIWRAP="mpiwrap.sh"
#RUNLOCAL=1
SCATTERFILES='*.cfg pre-config pre-obj-1 material.pm inputprofile.dat'
GATHERFILES='*.in *.out'

# ----- serial prerun and postrun; runs on first node only!

LOCDIR=$TMPDIR.L
PEXECUTE=$LOCDIR/PEXECUTE.SH
PSCATTER=$LOCDIR/PSCATTER.SH
PGATHER=$LOCDIR/PGATHER.SH

prerun () { 

PRE1="./pre-config config.cfg $NHOSTS"
echo "qscript firing up preprocessing: $PRE1"
rm -f *.in
$PRE1
$PSCATTER '*.in'
true;


}

postrun () { 
true;
}

# ----------------------------------------------------------
#  flags for SGE
# ----------------------------------------------------------

# all documented in "man qsub"

# ------- shell to use
#$ -S /bin/bash
# ------- current working directory
#$ -cwd
# ------- environment variables (use -V to export all)
#$ -v PATH,LD_LIBRARY_PATH
# ------- email notification
# #$ -m
# #$ -M someuser@somewhere
# ------- redirect output streams 
# #$ -j            
# #$ -o logstd
# #$ -e logerr
# ------- specify ressources
# #$ -l h_rt=1:00:00     
# #$ -l h_vmem=1G        
# ------- quad node? (default: false)
# #$ -l quad=true
# ------- use smp nodes
#$ -l mp=1

# ----------------------------------------------------------
#  job script
# ----------------------------------------------------------
# all output goes in $JOB_NAME.o$JOB_ID, $JOB_NAME.e$JOB_ID

SO=startup-pe.o$JOB_ID
SE=startup-pe.e$JOB_ID

# --- using "-v PATH" means we loose $TMPDIR in path

QSUBDIR=$PWD
PATH=$TMPDIR:$PATH
export PATH
echo  >>$SO 2>>$SE
echo "+ ============= begin of qscript.mpi" >>$SO 2>>$SE
echo "+ --------- checking environment" >>$SO 2>>$SE
cat  >>$SO 2>>$SE <<EOF
PATH= $PATH
LD_LIBRARY_PATH= $LD_LIBRARY_PATH
QSUBDIR= $QSUBDIR
EOF

# --- scripts created by prolog

LOCDIR=$TMPDIR.L
PEXECUTE=$LOCDIR/PEXECUTE.SH
PSCATTER=$LOCDIR/PSCATTER.SH
PGATHER=$LOCDIR/PGATHER.SH

# --- settings

EXECUTE=$PROGRAM
if [ x$MPIWRAP != x ]; then
EXECUTE="$MPIWRAP $EXECUTE"
fi

MPIRUN1="`which mpirun_rsh` -rsh -np $NSLOTS -hostfile $TMPDIR/machines"
MPIRUN2="`which mpirun` -np $NSLOTS -machinefile $TMPDIR/machines"
CWD="`pwd`"
RUN="$MPIRUN2 $EXECUTE $FLAGS"

# --- put everything in place

if [ x$RUNLOCAL != x ]; then
echo "+ --------- populating $LOCDIR:"  >>$SO 2>>$SE
echo "copying $MPIWRAP $PROGRAM -> $LOCDIR"  >>$SO 2>>$SE
$PSCATTER "$MPIWRAP $PROGRAM"
if [ "x$SCATTERFILES" != "x" ]; then
echo "copying \"$SCATTERFILES\" -> $LOCDIR"  >>$SO 2>>$SE
$PSCATTER "$SCATTERFILES"
fi
fi

# --- change to LOCDIR if RUNLOCAL=1

if [ x$RUNLOCAL != x ]; then
echo "changing directory -> $LOCDIR"  >>$SO 2>>$SE
cd $LOCDIR
$PEXECUTE "ln -sf $QSUBDIR/$SO $LOCDIR/$SO"
$PEXECUTE "ln -sf $QSUBDIR/$SE $LOCDIR/$SE"
fi

# --- prerun

echo "+ --------- invoking prerun()"  >>$SO 2>>$SE
prerun


# --- content of locdir

echo "+ --------- content of $LOCDIR:"  >>$SO 2>>$SE
ls -al $LOCDIR >>$SO 2>>$SE


# --- start program

echo "+ --------- executing program via mpirun" >>$SO 2>>$SE
echo "RUN= $RUN" >>$SO 2>>$SE
echo "using: `which rsh`"  >>$SO 2>>$SE
time $RUN 

# --- postrun

echo "+ --------- invoking postrun()"  >>$SO 2>>$SE
postrun

# --- copy files / directories back from LOCDIR to QSUBDIR

if [ x$RUNLOCAL != x ]; then
if [ "x$GATHERFILES" != "x" ]; then
echo "gathering data from $LOCDIR"  >>$SO 2>>$SE
$PGATHER "$GATHERFILES"
fi
fi

echo "+ ============= end of qscript.mpi" >>$SO 2>>$SE
